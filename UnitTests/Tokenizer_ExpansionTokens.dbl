
import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine
import System.Collections.Generic

.array 0

namespace UnitTests
	
	public partial class TokenizerTests
		
		private method tokenizeExpansionToken, boolean
			required in tknName, String
			required in tknType, TokenType
			endparams
		proc
			data tokens, @List<Token>, new Tokenizer().Tokenize(string.Format("<{0}>",tknName))
			mreturn (tokens[0].TypeOfToken == tknType)
		endmethod
		
.region "Generic Tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericAuthor, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("AUTHOR",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericCodeGenVersion, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("CODEGEN_VERSION",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericCompany, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COMPANY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericDate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericDate1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATE1",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericDay, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DAY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericFieldPrefix, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PREFIX",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericGuid1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID1",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericGuid2, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID2",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericGuid3, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID3",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericMonth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTH",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericMonthName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTHNAME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericMonthShortName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTHSHORTNAME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericNamespace, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("NAMESPACE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericTemplate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TEMPLATE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericTime, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TIME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericWeekday, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WEEKDAY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method GenericYear, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("YEAR",TokenType.Generic))
		endmethod
		
.endregion
		
.region "Structure Tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureDataFieldsList, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATA_FIELDS_LIST",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureDisplayField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DISPLAY_FIELD",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileAddressing, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_ADDRESSING",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileChangeTracking, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_CHANGE_TRACKING",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileCompression, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_COMPRESSION",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_DENSITY",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_DESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_NAME",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileNameNoExt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_NAME_NOEXT",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFilePageSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_PAGESIZE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileRecType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_RECTYPE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileStaticRfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_STATIC_RFA",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileStoredGrfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_STORED_GRFA",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_TYPE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFileUtext, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_UTEXT",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureMappedFile, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_FILE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureMappedStructure, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_STRUCTURE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructurePrimaryKeyField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PRIMARY_KEY_FIELD",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureChildren, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_CHILDREN",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_DESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureFields, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_FIELDS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureKeys, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_KEYS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureLdesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_LDESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_NAME",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureNoAlias, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_NOALIAS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_SIZE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method StructureUtext, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_UTEXT",TokenType.StructureInfo))
		endmethod
		
.endregion
		
.region "Field loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldAltName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ALTNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldArriveMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ARRIVEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldBaseName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_BASENAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldBreakMode, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_BREAK_MODE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Field, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CHANGEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldColumn, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldCsDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldCsType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldCsConvert, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSCONVERT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DESC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDimension1Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION1_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDimension2Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION2_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDimension3Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION3_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDimension4Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION4_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDrillMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DRILLM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldElement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ELEMENT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldElement0, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ELEMENT0",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldEnumLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ENUMLENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldEnumWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ENUMWIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldFormatName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_FORMATNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldHeading, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HEADING",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldHelpId, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HELPID",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldHyperlinkMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HYPERM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldInfoLine, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_INFOLINE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldLongDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_LDESC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldLEaveMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_LEAVEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldMaxValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_MAXVALUE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldMinValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_MINVALUE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNetName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NETNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNoEchoChar, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NOECHO_CHAR",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldOcDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_OCDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldOcType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_OCTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldOriginalName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ORIGINAL_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPath, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PATH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPathConv, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PATH_CONV",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPixelRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPixelWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_WIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldDrillPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DRILL_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldInputLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_INPUT_LENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldOdbcName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ODBCNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPosition, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_POSITION",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPositionZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_POSITION_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPrecision, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PRECISION",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPrecision2, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PRECISION2",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldPrompt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PROMPT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldRangeMax, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_RANGE_MAX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldRangeMin, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_RANGE_MIN",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldRegEx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_REGEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelections, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELECTIONS",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelections1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELECTIONS1",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELLENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelWnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELWND",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelWndOriginal, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELWND_ORIGINAL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SIZE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSnType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SNTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSnDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SNDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSpec, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SPEC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSqlName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SQLNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSqlType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SQLTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldTemplate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TEMPLATE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldTkScript, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TKSCRIPT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldTypeName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TYPE_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldUserText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_UTEXT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldVbDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_VBDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldVbType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_VBTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNumberZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNumberLogical, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#LOGICAL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldNumberLogicalZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#LOGICAL_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method MappedField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_FIELD",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method MappedPath, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_PATH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method MappedPathConv, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_PATH_CONV",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method PromptCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method PromptPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method PromptPizelRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method PromptPixelWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_WIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method PromptRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_ROW",TokenType.FieldLoop))
		endmethod
		
.endregion
		
.region "Field selection loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelectionCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_COUNT",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelectionNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_NUMBER",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelectionText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_TEXT",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FieldSelectionValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_VALUE",TokenType.FieldSelectionLoop))
		endmethod
		
.endregion
		
.region "Key loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyChanges, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_CHANGES",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DENSITY",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DESCRIPTION",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyDuplicates, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DUPLICATES",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyDuplicatesAt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DUPLICATES_AT",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_LENGTH",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NAME",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyNullType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NULLTYPE",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyNullValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NULLVALUE",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NUMBER",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyOrder, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_ORDER",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeySegments, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_SEGMENTS",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeyLoopKeyUnique, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_UNIQUE",TokenType.KeyLoop))
		endmethod
		
.endregion
		
.region "Key segment loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentCsType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_CSTYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_DESC",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentKind, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_KIND",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_LENGTH",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentLitVal, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_LITVAL",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentMappedName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_MAPPEDNAME",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_NAME",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_NUMBER",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentOrder, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_ORDER",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentPosition, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_POSITION",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentSequence, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SEQUENCE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentSnType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SNTYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentSpec, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SPEC",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentStructure, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_STRUCTURE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_TYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method KeySegmentLoopSegmentVbType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_VBTYPE",TokenType.KeySegmentLoop))
		endmethod
		
.endregion
		
.region "Enum loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_COUNT",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_DESCRIPTION",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopLongDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_LONG_DESCRIPTION",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopMenberCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_COUNT",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_NAME",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumLoopNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_NUMBER",TokenType.EnumLoop))
		endmethod
		
.endregion
		
.region "Enum member loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumMemberLoopExplicitValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_EXPLICIT_VALUE",TokenType.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumMemberLoopImplicitValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_IMPLICIT_VALUE",TokenType.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method EnumMemberLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_NAME",TokenType.EnumMemberLoop))
		endmethod
		
.endregion
		
.region "Tag loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopConnectorC, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_CONNECTOR_C",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopConnectorDbl, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_CONNECTOR_DBL",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopConnectorSql, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_CONNECTOR_SQL",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldAltName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ALTNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldBaseName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_BASENAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_NAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldOdbcName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ODBCNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldOriginalName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ORIGINALNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopFieldSqlName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_SQLNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopOperatorC, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_OPERATOR_C",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopOperatorDbl, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_OPERATOR_DBL",TokenType.TagLoop))
		endmethod

		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopOperatorSql, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_OPERATOR_SQL",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopSequence, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_SEQUENCE",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopTagName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_TAG_NAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method TagLoopTagValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_TAG_VALUE",TokenType.TagLoop))
		endmethod
		
.endregion
		
.region "File loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopAddressing, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_ADDRESSING",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopChangeTracking, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_CHANGE_TRACKING",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopCompression, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_COMPRESSION",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_DENSITY",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_DESC",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_NAME",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopNameNoExt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_NAME_NOEXT",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopPageSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_PAGESIZE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopRecType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_RECTYPE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopStaticRfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_STATIC_RFA",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopStoredGrfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_STORED_GRFA",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_TYPE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method FileLoopUserText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_UTEXT",TokenType.FileLoop))
		endmethod
		
.endregion
		
.region "Button loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopCaption, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_CAPTION",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopColPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_COLPX",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopElb, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_ELB",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopImage, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_IMAGE",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_METHOD",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_NAME",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_NUMBER",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopQuickSelect, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_QUICKSELECT",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopRowPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_ROWPX",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method ButtonLoopWidthPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_WIDTHPX",TokenType.ButtonLoop))
		endmethod
		
.endregion
		
.region "Counter tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter1Decrement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_DECREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter1Increment, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_INCREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter1Reset, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_RESET",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter1Value, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_VALUE",TokenType.Counter))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter2Decrement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_DECREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter2Increment, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_INCREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter2Reset, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_RESET",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method Counter2Value, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_VALUE",TokenType.Counter))
		endmethod
		
.endregion
		
.region "Window tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method WindowHeight, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_HEIGHT",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method WindowHeightPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_HEIGHTPX",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method WindowName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_NAME",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method WindowWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_WIDTH",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method WindowWidthPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_WIDTHPX",TokenType.Window))
		endmethod
		
.endregion
		
.region "User-defined tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - User Defined Tokens")}
		public method UserToken1, void
		proc
			data task = new CodeGenTask()
			data taskset = new CodeGenTaskSet()
			taskset.Tasks.Add(task)
			data context = new CodeGenContext(taskset)
			context.CurrentTask = task
			context.UserTokens.Add(new UserToken("USER_DEFINED_TOKEN_1","Hello Tokenizer"))
			
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<USER_DEFINED_TOKEN_1>")
			Assert.IsTrue(tokens[0].TypeOfToken == TokenType.User)
		endmethod

		{TestMethod}
		{TestCategory("Tokenizer - User Defined Tokens")}
		public method UserToken2, void
		proc
			data task = new CodeGenTask() { PreProcessUserTokens=true }
			data taskset = new CodeGenTaskSet()
			taskset.Tasks.Add(task)
			data context = new CodeGenContext(taskset)
			context.CurrentTask = task
			context.UserTokens.Add(new UserToken("MYTOKEN",'%SomeFunction("<FILE_NAME>")'))
			
			data tokens = new Tokenizer(context).Tokenize("<MYTOKEN>")
			Assert.IsTrue(
			&	tokens.Count==3
			&	&& tokens[0].TypeOfToken == TokenType.Text
			&	&& tokens[1].TypeOfToken == TokenType.StructureInfo
			&	&& tokens[1].Value == "FILE_NAME"
			&	&& tokens[2].TypeOfToken == TokenType.Text)
		endmethod
		
.endregion
		
.region "Loop Utility Tokens"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityComma, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(",",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityPlus, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("+",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityColon, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(":",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityCsAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("&&",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityCsOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("||",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilitySynergyAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(".AND.",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilitySynergyOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(".OR.",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityEnglishAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("AND",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expansion Tokens")}
		public method LoopUtilityEnglishOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("OR",TokenType.LoopUtility))
		endmethod
		
.endregion

	endclass

endnamespace
